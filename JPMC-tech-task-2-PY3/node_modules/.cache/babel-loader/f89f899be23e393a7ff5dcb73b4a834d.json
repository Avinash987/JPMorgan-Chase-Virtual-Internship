{"ast":null,"code":"import _classCallCheck from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport './Graph.css';\n/**\n * Props declaration for <Graph />\n */\n\n/**\n * React component that renders Perspective based on data\n * parsed from its parent through data property.\n */\nvar Graph =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Graph, _Component);\n\n  function Graph() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Graph)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.table = void 0;\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement('perspective-viewer');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Get element to attach the table from the DOM.\n      var elem = document.getElementsByTagName('perspective-viewer')[0];\n      var schema = {\n        stock: 'string',\n        top_ask_price: 'float',\n        top_bid_price: 'float',\n        timestamp: 'date'\n      };\n\n      if (window.perspective && window.perspective.worker()) {\n        this.table = window.perspective.worker().table(schema);\n      }\n\n      if (this.table) {\n        // Load the `table` in the `<perspective-viewer>` DOM reference.\n        // Add more Perspective configurations here.\n        elem.load(this.table);\n        elem.setAttribute('view', 'y_line');\n        elem.setAttribute('column-pivots', '[\"stock\"]');\n        elem.setAttribute('row-pivots', '[\"timestamp\"]');\n        elem.setAttribute('columns', '[\"top_ask_price\"]');\n        elem.setAttribute('aggregates', {\n          \"stock\": \"distinct count\",\n          \"top_ask_price\": \"avg\",\n          \"top_bid_price\": \"avg\",\n          \"timestamp\": \"distinct count\"\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Everytime the data props is updated, insert the data into Perspective table\n      if (this.table) {\n        // As part of the task, you need to fix the way we update the data props to\n        // avoid inserting duplicated entries into Perspective table again.\n        this.table.update(this.props.data.map(function (el) {\n          // Format the data from ServerRespond to the schema\n          return {\n            stock: el.stock,\n            top_ask_price: el.top_ask && el.top_ask.price || 0,\n            top_bid_price: el.top_bid && el.top_bid.price || 0,\n            timestamp: el.timestamp\n          };\n        }));\n      }\n    }\n  }]);\n\n  return Graph;\n}(Component);\n\nexport default Graph;","map":{"version":3,"sources":["/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/src/Graph.tsx"],"names":["React","Component","Graph","table","createElement","elem","document","getElementsByTagName","schema","stock","top_ask_price","top_bid_price","timestamp","window","perspective","worker","load","setAttribute","update","props","data","map","el","top_ask","price","top_bid"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGA,OAAO,aAAP;AAEA;;;;AAeA;;;;IAIMC,K;;;;;;;;;;;;;;;;;UAEJC,K;;;;;;6BAES;AACP,aAAOH,KAAK,CAACI,aAAN,CAAoB,oBAApB,CAAP;AACD;;;wCAEmB;AAClB;AACA,UAAMC,IAAI,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,oBAA9B,EAAoD,CAApD,CAAb;AAEA,UAAMC,MAAM,GAAG;AACbC,QAAAA,KAAK,EAAE,QADM;AAEbC,QAAAA,aAAa,EAAE,OAFF;AAGbC,QAAAA,aAAa,EAAE,OAHF;AAIbC,QAAAA,SAAS,EAAE;AAJE,OAAf;;AAOA,UAAIC,MAAM,CAACC,WAAP,IAAsBD,MAAM,CAACC,WAAP,CAAmBC,MAAnB,EAA1B,EAAuD;AACrD,aAAKZ,KAAL,GAAaU,MAAM,CAACC,WAAP,CAAmBC,MAAnB,GAA4BZ,KAA5B,CAAkCK,MAAlC,CAAb;AACD;;AACD,UAAI,KAAKL,KAAT,EAAgB;AACd;AAEA;AACAE,QAAAA,IAAI,CAACW,IAAL,CAAU,KAAKb,KAAf;AACAE,QAAAA,IAAI,CAACY,YAAL,CAAkB,MAAlB,EAA0B,QAA1B;AACAZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,eAAlB,EAAmC,WAAnC;AACAZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,YAAlB,EAAgC,eAAhC;AACAZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,SAAlB,EAA6B,mBAA7B;AACAZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,YAAlB,EACA;AAAC,mBAAS,gBAAV;AACA,2BAAiB,KADjB;AAEA,2BAAiB,KAFjB;AAGA,uBAAa;AAHb,SADA;AAKD;AACF;;;yCAEoB;AACnB;AACA,UAAI,KAAKd,KAAT,EAAgB;AACd;AACA;AACA,aAAKA,KAAL,CAAWe,MAAX,CAAkB,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,GAAhB,CAAoB,UAACC,EAAD,EAAa;AACjD;AACA,iBAAO;AACLb,YAAAA,KAAK,EAAEa,EAAE,CAACb,KADL;AAELC,YAAAA,aAAa,EAAEY,EAAE,CAACC,OAAH,IAAcD,EAAE,CAACC,OAAH,CAAWC,KAAzB,IAAkC,CAF5C;AAGLb,YAAAA,aAAa,EAAEW,EAAE,CAACG,OAAH,IAAcH,EAAE,CAACG,OAAH,CAAWD,KAAzB,IAAkC,CAH5C;AAILZ,YAAAA,SAAS,EAAEU,EAAE,CAACV;AAJT,WAAP;AAMD,SARiB,CAAlB;AASD;AACF;;;;EAtDiBX,S;;AAyDpB,eAAeC,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Table } from '@jpmorganchase/perspective';\nimport { ServerRespond } from './DataStreamer';\nimport './Graph.css';\n\n/**\n * Props declaration for <Graph />\n */\ninterface IProps {\n  data: ServerRespond[],\n}\n\n/**\n * Perspective library adds load to HTMLElement prototype.\n * This interface acts as a wrapper for Typescript compiler.\n */\ninterface PerspectiveViewerElement  extends HTMLElement{\n  load: (table: Table) => void,\n}\n\n/**\n * React component that renders Perspective based on data\n * parsed from its parent through data property.\n */\nclass Graph extends Component<IProps, {}> {\n  // Perspective table\n  table: Table | undefined;\n\n  render() {\n    return React.createElement('perspective-viewer');\n  }\n\n  componentDidMount() {\n    // Get element to attach the table from the DOM.\n    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\n\n    const schema = {\n      stock: 'string',\n      top_ask_price: 'float',\n      top_bid_price: 'float',\n      timestamp: 'date',\n    };\n\n    if (window.perspective && window.perspective.worker()) {\n      this.table = window.perspective.worker().table(schema);\n    }\n    if (this.table) {\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\n\n      // Add more Perspective configurations here.\n      elem.load(this.table);\n      elem.setAttribute('view', 'y_line');\n      elem.setAttribute('column-pivots', '[\"stock\"]');\n      elem.setAttribute('row-pivots', '[\"timestamp\"]');\n      elem.setAttribute('columns', '[\"top_ask_price\"]');\n      elem.setAttribute('aggregates',\n      {\"stock\": \"distinct count\",\n      \"top_ask_price\": \"avg\",\n      \"top_bid_price\": \"avg\",\n      \"timestamp\": \"distinct count\"})\n    }\n  }\n\n  componentDidUpdate() {\n    // Everytime the data props is updated, insert the data into Perspective table\n    if (this.table) {\n      // As part of the task, you need to fix the way we update the data props to\n      // avoid inserting duplicated entries into Perspective table again.\n      this.table.update(this.props.data.map((el: any) => {\n        // Format the data from ServerRespond to the schema\n        return {\n          stock: el.stock,\n          top_ask_price: el.top_ask && el.top_ask.price || 0,\n          top_bid_price: el.top_bid && el.top_bid.price || 0,\n          timestamp: el.timestamp,\n        };\n      }));\n    }\n  }\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}