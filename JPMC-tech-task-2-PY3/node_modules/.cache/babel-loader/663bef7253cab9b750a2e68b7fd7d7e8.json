{"ast":null,"code":"import _classCallCheck from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * The datafeed server returns an array of ServerRespond with 2 stocks.\n * We do not have to manipulate the ServerRespond for the purpose of this task.\n */\nvar DataStreamer =\n/*#__PURE__*/\nfunction () {\n  function DataStreamer() {\n    _classCallCheck(this, DataStreamer);\n  }\n\n  _createClass(DataStreamer, null, [{\n    key: \"getData\",\n    // The url where datafeed server is listening\n\n    /**\n     * Send request to the datafeed server and executes callback function on success\n     * @param callback callback function that takes JSON object as its argument\n     */\n    value: function getData(callback) {\n      var request = new XMLHttpRequest();\n      request.open('GET', DataStreamer.API_URL, false);\n\n      request.onload = function () {\n        if (request.status === 200) {\n          callback(JSON.parse(request.responseText));\n        } else {\n          alert('Request failed');\n        }\n      };\n\n      request.send();\n    }\n  }]);\n\n  return DataStreamer;\n}();\n\nDataStreamer.API_URL = 'http://localhost:8080/query?id=1';\nexport default DataStreamer;","map":{"version":3,"sources":["/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/src/DataStreamer.ts"],"names":["DataStreamer","callback","request","XMLHttpRequest","open","API_URL","onload","status","JSON","parse","responseText","alert","send"],"mappings":";;;AAIA;;;;IAWMA,Y;;;;;;;;;AACJ;;AAGA;;;;4BAIeC,Q,EAAiD;AAC9D,UAAMC,OAAO,GAAG,IAAIC,cAAJ,EAAhB;AACAD,MAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBJ,YAAY,CAACK,OAAjC,EAA0C,KAA1C;;AAEAH,MAAAA,OAAO,CAACI,MAAR,GAAiB,YAAM;AACrB,YAAIJ,OAAO,CAACK,MAAR,KAAmB,GAAvB,EAA4B;AAC1BN,UAAAA,QAAQ,CAACO,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACQ,YAAnB,CAAD,CAAR;AACD,SAFD,MAEO;AACLC,UAAAA,KAAK,CAAE,gBAAF,CAAL;AACD;AACF,OAND;;AAQAT,MAAAA,OAAO,CAACU,IAAR;AACD;;;;;;AArBGZ,Y,CAEGK,O,GAAkB,kC;AAsB3B,eAAeL,YAAf","sourcesContent":["export interface Order {\n  price: Number,\n  size: Number,\n}\n/**\n * The datafeed server returns an array of ServerRespond with 2 stocks.\n * We do not have to manipulate the ServerRespond for the purpose of this task.\n */\nexport interface ServerRespond {\n  stock: string,\n  top_bid: Order,\n  top_ask: Order,\n  timestamp: Date,\n}\n\nclass DataStreamer {\n  // The url where datafeed server is listening\n  static API_URL: string = 'http://localhost:8080/query?id=1';\n\n  /**\n   * Send request to the datafeed server and executes callback function on success\n   * @param callback callback function that takes JSON object as its argument\n   */\n  static getData(callback: (data: ServerRespond[]) => void): void {\n    const request = new XMLHttpRequest();\n    request.open('GET', DataStreamer.API_URL, false);\n\n    request.onload = () => {\n      if (request.status === 200) {\n        callback(JSON.parse(request.responseText));\n      } else {\n        alert ('Request failed');\n      }\n    }\n\n    request.send();\n  }\n}\n\nexport default DataStreamer;"]},"metadata":{},"sourceType":"module"}