{"ast":null,"code":"import _classCallCheck from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/src/App.tsx\";\nimport React, { Component } from 'react';\nimport DataStreamer from './DataStreamer';\nimport Graph from './Graph';\nimport './App.css';\n/**\n * State declaration for <App />\n */\n\n/**\n * The parent element of the react app.\n * It renders title, button and Graph react element.\n */\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      // data saves the server responds.\n      // We use this state to parse data down to the child element (Graph) as element property\n      data: [],\n      showGraph: false\n    };\n    return _this;\n  }\n  /**\n   * Render Graph react component with state.data parse as property data\n   */\n\n\n  _createClass(App, [{\n    key: \"renderGraph\",\n    value: function renderGraph() {\n      if (this.state.showGraph) {\n        return React.createElement(Graph, {\n          data: this.state.data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }\n    }\n    /**\n     * Get new data from server and update the state with the new data\n     */\n\n  }, {\n    key: \"getDataFromServer\",\n    value: function getDataFromServer() {\n      var _this2 = this;\n\n      var x = 0;\n      var interval = setInterval(function () {\n        DataStreamer.getData(function (serverResponds) {\n          // Update the state by creating a new array of data that consists of\n          // Previous data in the state and the new data from server\n          _this2.setState({\n            data: serverResponds,\n            showGraph: true\n          });\n        });\n        x++;\n\n        if (x > 1000) {\n          clearInterval(interval);\n        }\n      }, 100);\n    }\n    /**\n     * Render the App react component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Bank & Merge Co Task 2\"), React.createElement(\"div\", {\n        className: \"App-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary Stream-button\" // when button is click, our react app tries to request\n        // new data from the server.\n        // As part of your task, update the getDataFromServer() function\n        // to keep requesting the data every 100ms until the app is closed\n        // or the server does not return anymore data.\n        ,\n        onClick: function onClick() {\n          _this3.getDataFromServer();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Start Streaming Data\"), React.createElement(\"div\", {\n        className: \"Graph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.renderGraph())));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/avinash/workspace/JPMorgna-Chase-Virtual-Internship/JPMC-tech-task-2-PY3/src/App.tsx"],"names":["React","Component","DataStreamer","Graph","App","props","state","data","showGraph","x","interval","setInterval","getData","serverResponds","setState","clearInterval","getDataFromServer","renderGraph"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAA4C,gBAA5C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AAEA;;;;AAQA;;;;IAIMC,G;;;;;AACJ,eAAYC,KAAZ,EAAuB;AAAA;;AAAA;;AACrB,6EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACX;AACA;AACAC,MAAAA,IAAI,EAAE,EAHK;AAIXC,MAAAA,SAAS,EAAE;AAJA,KAAb;AAHqB;AAStB;AAED;;;;;;;kCAGc;AACZ,UAAG,KAAKF,KAAL,CAAWE,SAAd,EAAyB;AACvB,eAAQ,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACD;AACF;AAED;;;;;;wCAGoB;AAAA;;AAClB,UAAIE,CAAC,GAAG,CAAR;AACA,UAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjCT,QAAAA,YAAY,CAACU,OAAb,CAAqB,UAACC,cAAD,EAAqC;AACxD;AACA;AACA,UAAA,MAAI,CAACC,QAAL,CAAc;AACZP,YAAAA,IAAI,EAAEM,cADM;AAEZL,YAAAA,SAAS,EAAE;AAFC,WAAd;AAID,SAPD;AAQAC,QAAAA,CAAC;;AACD,YAAGA,CAAC,GAAG,IAAP,EAAa;AACTM,UAAAA,aAAa,CAACL,QAAD,CAAb;AACH;AACJ,OAb6B,EAa3B,GAb2B,CAA5B;AAcD;AAED;;;;;;6BAGS;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAIE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,+BAAlB,CACE;AACA;AACA;AACA;AACA;AALF;AAME,QAAA,OAAO,EAAE,mBAAM;AAAC,UAAA,MAAI,CAACM,iBAAL;AAAyB,SAN3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAUE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,WAAL,EADH,CAVF,CAJF,CADF;AAqBD;;;;EAnEehB,S;;AAsElB,eAAeG,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport DataStreamer, { ServerRespond } from './DataStreamer';\nimport Graph from './Graph';\nimport './App.css';\n\n/**\n * State declaration for <App />\n */\ninterface IState {\n  data: ServerRespond[],\n  showGraph: boolean,\n}\n\n/**\n * The parent element of the react app.\n * It renders title, button and Graph react element.\n */\nclass App extends Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      // data saves the server responds.\n      // We use this state to parse data down to the child element (Graph) as element property\n      data: [],\n      showGraph: false,\n    };\n  }\n\n  /**\n   * Render Graph react component with state.data parse as property data\n   */\n  renderGraph() {\n    if(this.state.showGraph) {\n      return (<Graph data={this.state.data}/>)\n    }\n  }\n\n  /**\n   * Get new data from server and update the state with the new data\n   */\n  getDataFromServer() {\n    let x = 0;\n    const interval = setInterval(() => {\n      DataStreamer.getData((serverResponds: ServerRespond[]) => {\n        // Update the state by creating a new array of data that consists of\n        // Previous data in the state and the new data from server\n        this.setState({\n          data: serverResponds,\n          showGraph: true,\n        });\n      });\n      x++;\n      if(x > 1000) {\n          clearInterval(interval);\n      }\n  }, 100);\n  }\n\n  /**\n   * Render the App react component\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Bank & Merge Co Task 2\n        </header>\n        <div className=\"App-content\">\n          <button className=\"btn btn-primary Stream-button\"\n            // when button is click, our react app tries to request\n            // new data from the server.\n            // As part of your task, update the getDataFromServer() function\n            // to keep requesting the data every 100ms until the app is closed\n            // or the server does not return anymore data.\n            onClick={() => {this.getDataFromServer()}}>\n            Start Streaming Data\n          </button>\n          <div className=\"Graph\">\n            {this.renderGraph()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}